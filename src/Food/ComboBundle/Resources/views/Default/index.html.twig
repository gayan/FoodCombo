<!DOCTYPE html>
<!--[if lt IE 7 ]><html class="ie ie6" lang="en"> <![endif]-->
<!--[if IE 7 ]><html class="ie ie7" lang="en"> <![endif]-->
<!--[if IE 8 ]><html class="ie ie8" lang="en"> <![endif]-->
<!--[if (gte IE 9)|!(IE)]><!-->
<html lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <title>nom pairings</title>
    <meta name="description" content="" />
    <meta name="keywords" content="nom nom, food, combine, combinations, pairings" />
    <meta name="robots" content="index,follow" />
    <link rel="apple-touch-icon" href="{{ asset('images/code-icon.png') }}"/>
    <link rel="shortcut icon" href="{{ asset('images/favicon.ico') }}" />
    <link rel="stylesheet" href="{{ asset('css/style.css') }}" type="text/css" />
    <link rel="stylesheet" href="{{ asset('css/add2home.css') }}">
    <link rel="stylesheet" href="//code.jquery.com/ui/1.10.1/themes/base/jquery-ui.css">
	<!--[if (gte IE 6)&(lte IE 8)]>
<script type="text/javascript" src="js/html5.js"></script>
<script type="text/javascript" src="js/selectivizr-min.js"></script>
<link rel="stylesheet" href="css/ie_7.css" type="text/css" />
<![endif]-->
    <script type="text/javascript" src="//code.jquery.com/jquery-1.9.1.js"></script>
    <script type="text/javascript" src="{{ asset('js/jquery.easing.1.3.js') }}"></script>
    <script type="text/javascript" src="//code.jquery.com/ui/1.10.1/jquery-ui.js"></script>
    <script type="text/javascript" src="{{ asset('js/all-in-one-min.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/setup.js') }}"></script>
	<script type="application/javascript" src="{{ asset('js/add2home.js') }}"></script>
	
	<style>
		#combo-input-form {
			text-align: center;
		}
		#combo-input-form input {
			width: 98%;
			height: 20px;
			font-size: 20px;
			margin: 0px;
			padding: 1%;
		}
		
		#add-combo .combo-container {
			border:1px solid #f2c779;
			background:#fff8c4;
			color:#ed7c18;
			font-size: 20px;
		}
		
		.combo-container {
			border:1px solid silver; /*#9ac1fa;*/
			/*background:#dbeefe;*/
			color: black;
			-webkit-border-radius:5px;
			-moz-border-radius:5px;
			border-radius:5px;
			padding:8px 10px;
			line-height:22px;
			margin-bottom:10px;
		}
		
		.combo-container a.button {
			margin: 0px 5px 0px 0px;
			cursor: pointer;
		}
		
		.combo-container .current-score {
			display: inline;
			float: left;
			line-height: 30px;
			margin-right: 5px;
			text-align: right;
			width: 30px;
		}

				
		.combo-container .food-name, .combo-container .combine {
			margin-left: 10px;
			color:#4180cf;
			font-size: 20px;
		}
		
		.combo-container .combine {
			color:#000000;
		}
		
		.combo-container .author {
			margin-left: 2px;
		}
		
		.header_bg {
			min-height: 20px;
		}
	</style>
 
    <!-- Header -->
    <header class="header_bg clearfix">
		<div class="container clearfix">
			 <!-- Logo -->
			
				<h1>nom pairings</h1>
			
			 <!-- /Logo -->
		</div>
	</header>
    <!-- /Header -->
    
	<!-- START CONTENT -->
    <section class="container clearfix">
		
		<div class="clear padding20"></div>

		
        <div id="combo-input" class="container">
        	<form id="combo-input-form">
				<div class="col_1_3">
					<input type="text" id="food1Name" name="food1" value="{{food1.foodName}}" />
				</div>
				<div class="col_1_3">
					AND
				</div>
				<div class="col_1_3 last">
					<input type="text" id="food2Name" name="food1" />
				</div>
			</form>
        </div>
				
		<div class="clear padding20"></div>
		
		<div id="add-combo" class="container">
		</div>
        
		
		<div class="clear"></div>
		<hr />
		
        <div id="combo-results" class="container">
		</div>
		
		<div class="clear"></div>
	
	</section>
    <!-- END CONTENT -->
	
    </div>
    <!--wrapper end-->
    
    <div id="fb-root"></div>
    
    <script type="text/javascript">
        window.fbAsyncInit = function() {
            FB.init({appId: '617352054947393', status: true, cookie: true, xfbml: true});
        };
        
        (function() {
            var e = document.createElement('script'); e.async = true;
            e.src = document.location.protocol + '//connect.facebook.net/en_US/all.js';
            document.getElementById('fb-root').appendChild(e);
        }());
    </script>
    
    <script type="text/javascript">
		$(document).ready(function() {

			var comboUtils = {
                homePageURL: "{{ path('food_combo_homepage') }}",
                saveURL: "{{ path('save') }}",
				addExistingComboToDom: function(combo) {
                    // Create new element and add it at the top of
					// the list below
                    var comboId = 'combo-'+combo.id;
					var $newComboContainer = $('<div>', {class : 'combo-container', id : comboId});
					var $newLikeButton = $('<fb:like href="http://nompairings.com'+comboUtils.homePageURL+"combo/"+combo.id+'" send="false" layout="button_count" show_faces="false"></fb:like>');
                    var $newFood1 = $('<a>', {class : 'food-name', href : comboUtils.homePageURL+combo.food1.food_name }).html(combo.food1.food_name);
					var $newCombineSpan =  $('<span>', {class: 'combine'}).html('&amp;');
					var $newFood2 = $('<a>', {class: 'food-name', href: comboUtils.homePageURL+combo.food2.food_name }).html(combo.food2.food_name);
					
					$newComboContainer.append($newLikeButton);
					$newComboContainer.append($newFood1);
					$newComboContainer.append($newCombineSpan);
					$newComboContainer.append($newFood2);
                    
                    // storing meta data in the dom.
                    $newComboContainer.data('jsonObject', combo);
					
					$newComboContainer.hide().appendTo('#combo-results').fadeIn('slow');
                    
                    FB.XFBML.parse(document.getElementById(comboId));
                },
                addNewComboToDom: function(combo) {
					// Create new element and add it at the top of
					// the list below
					var $newComboContainer = $('<div>', {class : 'combo-container'});
					var $newClearButton = $('<a>', {class : "button red clear-combo-button"}).html('X');
					var $newSaveButton = $('<a>', {class : "button green add-combo-button"}).html('save');
					var $newFood1 = $('<a>', {class : 'food-name', href : comboUtils.homePageURL+combo.food1.food_name }).html(combo.food1.food_name);
					var $newCombineSpan =  $('<span>', {class: 'combine'}).html('&amp;');
					var $newFood2 = $('<a>', {class: 'food-name', href: comboUtils.homePageURL+combo.food2.food_name }).html(combo.food2.food_name);
					
					$newComboContainer.append($newClearButton);
					$newComboContainer.append($newSaveButton);
					$newComboContainer.append($newFood1);
					$newComboContainer.append($newCombineSpan);
					$newComboContainer.append($newFood2);
                    
                    // storing meta data in the dom.
                    $newComboContainer.data('jsonObject', combo);                    
					
					$newComboContainer.hide().appendTo('#add-combo').fadeIn('slow');
				},
				delay: (function(){
				  var timer = 0;
				  return function(callback, ms){
					clearTimeout (timer);
					timer = setTimeout(callback, ms);
				  };
				})(),
				searchURL: "{{ path('search') }}",
                combosURL: "{{ path('combos') }}",
                searchFood: function(response, foodName) {
                    $.ajax({
                      url: comboUtils.searchURL + '/' + foodName,
                      success: function( data ) {
                        response( $.map( data, function( item ) {
                          return {
                            label: item.food_name,
                            value: item.food_name,
                            id: item.id
                          }
                        }));
                      }
                    });
                },
				food1Name: "{{food1.foodName}}",
				food1Id: "{{food1.id}}",
				food2Name: undefined,
				food2Id: undefined,
                getCombos: function(food1Id){
                    $.getJSON(comboUtils.combosURL + '/' + food1Id, function(data) {
                      $('#combo-results').empty();
                      $.each(data, function() {
                        comboUtils.addExistingComboToDom(this);
                      });
                    });
                }
			};
            
            // populate page
            comboUtils.getCombos({{food1.id}});
		
            $(document).on('click', '.clear-combo-button', function() {                
                $(this).parent().remove();
			});
            
			$(document).on('click', '.add-combo-button', function() {
				var url = comboUtils.saveURL + 
                            "/" + 
                            (comboUtils.food1Id === undefined ? comboUtils.food1Name : comboUtils.food1Id) + 
                            "/" + 
                            (comboUtils.food2Id === undefined ? comboUtils.food2Name : comboUtils.food2Id);
                
                comboUtils.lastAdded = $(this).parent();
                
                comboUtils.lastAdded.html("adding item...");
                
                $.post(url, function(data) {
                  comboUtils.addExistingComboToDom(data);
                  comboUtils.lastAdded.remove();
                });
			});
			
			$( "#food1Name" ).autocomplete({
			  source: function( request, response ) {
				comboUtils.searchFood(response, $('#food1Name').val());
			  },
			  minLength: 1,
			  select: function( event, ui ) {				
                if(ui.item) {
                    comboUtils.food1Name = ui.item.label;
                    comboUtils.food1Id = ui.item.id;
                    
                    comboUtils.getCombos(ui.item.id);
                    
                    $('#food2Name').focus();
                }
			  }
			});
			
			$( "#food1Name" ).focus(function(){
				comboUtils.food1Id = undefined;
				comboUtils.food1Name = undefined;
                comboUtils.food2Id = undefined;
				comboUtils.food2Name = undefined;
                
                $('#combo-results').empty();
                
                this.value = "";
                $( "#food2Name" ).val('');
			});
			
			$( "#food1Name" ).blur(function(){
				if(comboUtils.food1Id === undefined) {
					comboUtils.food1Name = this.value;
				}
			});
            
            $( "#food2Name" ).autocomplete({
			  source: function( request, response ) {
				comboUtils.searchFood(response, $('#food2Name').val());
			  },
			  minLength: 1,
			  select: function( event, ui ) {				
                if(ui.item) {
                    comboUtils.food2Name = ui.item.label;
                    comboUtils.food2Id = ui.item.id;
                    
                    // filter the result set
                    isFound = false;
                    $('#combo-results').children().each(function() {
                        if($(this).data('jsonObject').food2.id == ui.item.id) {
                            isFound = true;
                            $(this).fadeIn();
                        } else {
                            $(this).fadeOut();
                        }
                    });
                    
                    if(isFound) {
                        $('#add-combo').hide();
                    } else {
                        comboUtils.addNewComboToDom({
                                                        id: undefined,
                                                            food1: {
                                                                id: comboUtils.food1Id,
                                                                food_name: comboUtils.food1Name  
                                                            },
                                                            food2: {
                                                                id: ui.item.id,
                                                                food_name: ui.item.label
                                                            },
                                                            created_on: new Date(),
                                                            created_by: "user"
                                                    });
                    }
                    
                    $('#add-combo').fadeIn();
                    
                    $('#food2Name').blur();
                }
			  }
			});
            
            $( "#food2Name" ).focus(function(){
				comboUtils.food2Id = undefined;
				comboUtils.food2Name = undefined;
                this.value = "";
                
                $('#combo-results > .combo-container').fadeIn();
			});
            
            function handleNewFoods(_this) {
                if(comboUtils.food1Id === undefined || comboUtils.food2Id === undefined) {
					comboUtils.food2Name = _this.value;
                    
                    // we have to create a new combo
                    if(comboUtils.food2Name !== undefined && comboUtils.food2Name !== ''){
                        var newCombo = {
                                                        id: undefined,
                                                            food1: {
                                                                id: comboUtils.food1Id,
                                                                food_name: comboUtils.food1Name  
                                                            },
                                                            food2: {
                                                                id: comboUtils.food2Id,
                                                                food_name: comboUtils.food2Name
                                                            },
                                                            created_on: new Date(),
                                                            created_by: "user"
                                                    };
                        if(
                            comboUtils.lastAddedCombo === undefined ||
                            (comboUtils.lastAddedCombo.food1.food_name != newCombo.food1.food_name ||
                            comboUtils.lastAddedCombo.food2.food_name != newCombo.food2.food_name)                         
                        ) {
                            comboUtils.addNewComboToDom(newCombo);
                            comboUtils.lastAddedCombo = newCombo;
                        }
                    }
				}
            }
            
            $( "#food2Name" ).blur(function(){
				handleNewFoods(this);
			});
            
            $( "#food2Name" ).keypress(function(e){
				// if they hit enter
                if(e.which == 13) {
                    handleNewFoods(this);
                }
			});
            
            var timer = null;
            $( "#food2Name" ).keydown(function(){
                clearTimeout(timer);
                var food2Name = this;
                timer = setTimeout(function() {
                    handleNewFoods(food2Name)
                }, 1000)
            });
		});
	</script>
</body>
</html>
